#!/usr/bin/env bash


## Find true directory script resides in, true name, and true path
__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
    __SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -> \(.*\)@\1@p')"
done
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" && pwd)"
# __DIR_NAME__="${__DIR__##*/}"
__NAME__="${__SOURCE__##*/}"
# __PATH__="${__DIR__}/${__NAME__}"
__AUTHOR__='S0AndS0'
__DESCRIPTION__='Generates random passphrase of given length'


## Provides: 'falure' <line-number> <command> exit-code
# shellcheck source=modules/trap-failure/failure.sh
source "${__DIR__}/modules/trap-failure/failure.sh"
trap 'failure "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

## Provides:  'argument_parser <ref_to_allowed_args> <ref_to_user_supplied_args>'
# shellcheck source=modules/argument-parser/argument-parser.sh
source "${__DIR__}/modules/argument-parser/argument-parser.sh"


__license__(){
    local _year
    _year="$(date +'%Y')"
    cat <<EOF
Copyright (C) ${_year:-2020} ${__AUTHOR__:-"S0AndS0"}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published
by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
EOF
}


__usage__() {
    local _message="${1}"
    cat <<EOF
${__DESCRIPTION__}


Usage: ${__NAME__} [OPTION]...


Options:
-h    --help
    Prints this message and exists

-l    --license
    Prints license and exits

-v    --verbose
    Prints messages about skipped actions

-V    --version
    Prints version for this project and exits

"${_min_length:-32}" (first non-parameterized argument)
    Minimum number of printable characters to read from /dev/urandom

"${_max_length:-42}" (second non-paramaterized argument)
    Maxumum number of printable characters to read from /dev/urandom


Examples:
    ./${__NAME__} 32 42

    #> LUy+c99K(t5sF I9XG"?.S8l/=Ld]xwT
EOF

    if (( ${#_message} )); then
        printf >&2 '\n## Error: %s\n' "${_message}"
        exit 1
    fi
}


__version__() {
    local _version_number
    _version_number="$(git tag --list v* | tail -n1)"
    _version_number="${_version_number:-v0.0.1}"
    _version_number="${_version_number//[^0-9.]/}"

    cat <<EOF
${__NAME__} - ${_version_number}

$( __license__ )

Written by ${__AUTHOR__}
EOF

    return 0
}

## Save passed arguments and acceptable arguments to Bash arrays
# shellcheck disable=SC2034
_passed_args=( "${@:?No arguments provided}" )
_acceptable_args=(
    '--help|-h:bool'
    '--license|-l:bool'
    '--verbose|-v:bool'
    '--version|-V:bool'
    '--min-length:number-nil'
    '--max-length:number-nil'
)

## Pass arrays by reference/name to the `argument_parser` function
argument_parser '_passed_args' '_acceptable_args'
_exit_status="$?"

## Set defaults
_min_length="${_min_length:-32}"
_max_length="${_max_length:-${_min_length}}"


_passphrase_length="${_min_length}"
(( _max_length )) && (( _min_length )) && [[ "${_max_length}" -gt "${_min_length}" ]] && {
    _length_diff="$(( _max_length - _min_length ))"
    _passphrase_length="$(( $(shuf -i 0-${_length_diff} -n 1) + _min_length ))"
}

# shellcheck disable=SC2154
(( _help )) || (( _exit_status )) && {
    __usage__
    exit "${_exit_status:-0}"
}

# shellcheck disable=SC2154
(( _license )) && {
    printf '%s\n' "${__DESCRIPTION__}"
    __license__
    exit ${_exit_status:-0}
}

# shellcheck disable=SC2154
(( _version )) && {
    __version__
    exit ${_exit_status:-0}
}

# shellcheck disable=SC2154
(( _verbose )) && {
    printf >&2 '# _min_length -> %s\n' "${_min_length}"
    printf >&2 '# _max_length -> %s\n' "${_max_length}"
    printf >&2 '# _passphrase_length -> %s\n' "${_passphrase_length}"
}


if (( _passphrase_length )); then
    printf '%s\n' "$(tr -cd "[:print:]" </dev/urandom | head -c "${_passphrase_length}")"
else
    __usage__ '# Passphrase length was not greater than 0'
fi

